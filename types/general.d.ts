/** @noSelfInFile **/

declare namespace eq
{
    function load_encounter(name : string) : void;
    function unload_encounter(name : string) : void;
    function load_encounter_with_data(name : string, data : string) : void;
    function unload_encounter_with_data(name : string, data : string) : void;
    function register_npc_event(package_name : string, name : string, evt : number, 
        func : (this: void, 
            evt: NPCEventSay |
            NPCEventAggroSay |
            NPCEventProximitySay |
            NPCEventTrade |
            NPCEventHp |
            NPCEventTargetChange |
            NPCEventCastOn |
            NPCEventKilledMerit |
            NPCEventSlay |
            NPCEventEnter |
            NPCEventExit |
            NPCEventTaskAccepted |
            NPCEventPopupResponse |
            NPCEventWaypointArrive |
            NPCEventWaypointDepart |
            NPCEventHateList |
            NPCEventCombat |
            NPCEventSignal |
            NPCEventTimer |
            NPCEventDeath |
            NPCEventDeathComplete |
            NPCEventCast |
            NPCEventCastBegin |
            NPCEventFeignDeath |
            NPCEventEnterArea |
            NPCEventLeaveArea) => void|number) : void;
    /*function register_npc_event() : void;
    function unregister_npc_event() : void;
    function unregister_npc_event() : void;
    function register_player_event() : void;
    function register_player_event() : void;
    function unregister_player_event() : void;
    function unregister_player_event() : void;
    function register_item_event() : void;
    function register_item_event() : void;
    function unregister_item_event() : void;
    function unregister_item_event() : void;
    function register_spell_event() : void;
    function register_spell_event() : void;
    function unregister_spell_event() : void;
    function unregister_spell_event() : void;
    function spawn2() : void;
    function unique_spawn() : void;
    function unique_spawn() : void;
    function spawn_from_spawn2() : void;
    function enable_spawn2() : void;
    function disable_spawn2() : void;
    function set_timer() : void;
    function set_timer() : void;
    function set_timer() : void;
    function set_timer() : void;
    function stop_timer() : void;
    function stop_timer() : void;
    function stop_timer() : void;
    function stop_timer() : void;
    function pause_timer() : void;
    function resume_timer() : void;
    function is_paused_timer() : void;
    function stop_all_timers() : void;
    function stop_all_timers() : void;
    function stop_all_timers() : void;
    function stop_all_timers() : void;
    function depop() : void;
    function depop() : void;
    function depop_with_timer() : void;
    function depop_with_timer() : void;
    function depop_all() : void;
    function depop_all() : void;
    function depop_zone() : void;
    function repop_zone() : void;
    function process_mobs_while_zone_empty() : void;
    function is_disc_tome() : void;
    function get_race_name() : void;
    function get_spell_name() : void;
    function get_skill_name() : void;
    function safe_move() : void;
    function rain() : void;
    function snow() : void;
    function scribe_spells() : void;
    function scribe_spells() : void;
    function train_discs() : void;
    function train_discs() : void;
    function set_sky() : void;
    function set_guild() : void;
    function create_guild() : void;
    function set_time() : void;
    function set_time() : void;
    function signal() : void;
    function signal() : void;
    function set_global() : void;
    function target_global() : void;
    function delete_global() : void;
    function start() : void;
    function stop() : void;
    function pause() : void;
    function move_to() : void;
    function move_to() : void;
    function move_to() : void;
    function resume() : void;
    function set_next_hp_event() : void;
    function set_next_inc_hp_event() : void;
    function respawn() : void;
    function set_proximity() : void;
    function set_proximity() : void;
    function set_proximity() : void;
    function clear_proximity() : void;
    function enable_proximity_say() : void;
    function disable_proximity_say() : void;
    function set_anim() : void;
    function spawn_condition() : void;
    function get_spawn_condition() : void;
    function toggle_spawn_event() : void;
    function summon_buried_player_corpse() : void;
    function summon_all_player_corpses() : void;
    function get_player_corpse_count() : void;
    function get_player_corpse_count_by_zone_id() : void;
    function get_player_buried_corpse_count() : void;
    function bury_player_corpse() : void;
    function task_selector() : void;
    function task_set_selector() : void;
    function enable_task() : void;
    function disable_task() : void;
    function is_task_enabled() : void;
    function is_task_active() : void;
    function is_task_activity_active() : void;
    function get_task_activity_done_count() : void;
    function update_task_activity() : void;
    function reset_task_activity() : void;
    function task_explored_area() : void;
    function assign_task() : void;
    function fail_task() : void;
    function task_time_left() : void;
    function is_task_completed() : void;
    function enabled_task_count() : void;
    function first_task_in_set() : void;
    function last_task_in_set() : void;
    function next_task_in_set() : void;
    function active_speak_task() : void;
    function active_speak_activity() : void;
    function active_tasks_in_set() : void;
    function completed_tasks_in_set() : void;
    function is_task_appropriate() : void;
    function get_task_name() : void;
    function popup() : void;
    function clear_spawn_timers() : void;
    function zone_emote() : void;
    function world_emote() : void;
    function get_level() : void;
    function create_ground_object() : void;
    function create_ground_object() : void;
    function create_ground_object_from_model() : void;
    function create_ground_object_from_model() : void;
    function create_ground_object_from_model() : void;
    function create_door() : void;
    function modify_npc_stat() : void;
    function collect_items() : void;
    function count_item() : void;
    function update_spawn_timer() : void;
    function merchant_set_item() : void;
    function merchant_set_item() : void;
    function merchant_count_item() : void;
    function item_link() : void;
    function get_item_name() : void;
    function say_link() : void;
    function say_link() : void;
    function say_link() : void;
    function set_rule() : void;
    function get_rule() : void;
    function get_data() : void;
    function get_data_expires() : void;
    function set_data() : void;
    function set_data() : void;
    function delete_data() : void;
    function get_char_name_by_id() : void;
    function get_char_id_by_name() : void;
    function get_class_name() : void;
    function get_class_name() : void;
    function get_currency_id() : void;
    function get_currency_item_id() : void;
    function get_guild_name_by_id() : void;
    function get_guild_id_by_char_id() : void;
    function get_group_id_by_char_id() : void;
    function get_npc_name_by_id() : void;
    function get_raid_id_by_char_id() : void;
    function create_instance() : void;
    function destroy_instance() : void;
    function update_instance_timer() : void;
    function get_instance_id() : void;
    function get_instance_id_by_char_id() : void;
    function get_instance_timer() : void;
    function get_instance_timer_by_id() : void;
    function get_characters_in_instance() : void;
    function assign_to_instance() : void;
    function assign_to_instance_by_char_id() : void;
    function assign_group_to_instance() : void;
    function assign_raid_to_instance() : void;
    function remove_from_instance() : void;
    function remove_from_instance_by_char_id() : void;
    function check_instance_by_char_id() : void;
    function remove_all_from_instance() : void;
    function flag_instance_by_group_leader() : void;
    function flag_instance_by_raid_leader() : void;
    function fly_mode() : void;
    function faction_value() : void;
    function check_title() : void;
    function enable_title() : void;
    function remove_title() : void;
    function wear_change() : void;
    function voice_tell() : void;
    function send_mail() : void;
    function cross_zone_assign_task_by_char_id() : void;
    function cross_zone_assign_task_by_char_id() : void;
    function cross_zone_assign_task_by_group_id() : void;
    function cross_zone_assign_task_by_group_id() : void;
    function cross_zone_assign_task_by_raid_id() : void;
    function cross_zone_assign_task_by_raid_id() : void;
    function cross_zone_assign_task_by_guild_id() : void;
    function cross_zone_assign_task_by_guild_id() : void;
    function cross_zone_cast_spell_by_char_id() : void;
    function cross_zone_cast_spell_by_group_id() : void;
    function cross_zone_cast_spell_by_raid_id() : void;
    function cross_zone_cast_spell_by_guild_id() : void;
    function cross_zone_disable_task_by_char_id() : void;
    function cross_zone_disable_task_by_group_id() : void;
    function cross_zone_disable_task_by_raid_id() : void;
    function cross_zone_disable_task_by_guild_id() : void;
    function cross_zone_enable_task_by_char_id() : void;
    function cross_zone_enable_task_by_group_id() : void;
    function cross_zone_enable_task_by_raid_id() : void;
    function cross_zone_enable_task_by_guild_id() : void;
    function cross_zone_fail_task_by_char_id() : void;
    function cross_zone_fail_task_by_group_id() : void;
    function cross_zone_fail_task_by_raid_id() : void;
    function cross_zone_fail_task_by_guild_id() : void;
    function cross_zone_marquee_by_char_id() : void;
    function cross_zone_marquee_by_group_id() : void;
    function cross_zone_marquee_by_raid_id() : void;
    function cross_zone_marquee_by_guild_id() : void;
    function cross_zone_message_player_by_name() : void;
    function cross_zone_message_player_by_group_id() : void;
    function cross_zone_message_player_by_raid_id() : void;
    function cross_zone_message_player_by_guild_id() : void;
    function cross_zone_move_player_by_char_id() : void;
    function cross_zone_move_player_by_group_id() : void;
    function cross_zone_move_player_by_raid_id() : void;
    function cross_zone_move_player_by_guild_id() : void;
    function cross_zone_move_instance_by_char_id() : void;
    function cross_zone_move_instance_by_group_id() : void;
    function cross_zone_move_instance_by_raid_id() : void;
    function cross_zone_move_instance_by_guild_id() : void;
    function cross_zone_remove_spell_by_char_id() : void;
    function cross_zone_remove_spell_by_group_id() : void;
    function cross_zone_remove_spell_by_raid_id() : void;
    function cross_zone_remove_spell_by_guild_id() : void;
    function cross_zone_remove_task_by_char_id() : void;
    function cross_zone_remove_task_by_group_id() : void;
    function cross_zone_remove_task_by_raid_id() : void;
    function cross_zone_remove_task_by_guild_id() : void;
    function cross_zone_reset_activity_by_char_id() : void;
    function cross_zone_reset_activity_by_group_id() : void;
    function cross_zone_reset_activity_by_raid_id() : void;
    function cross_zone_reset_activity_by_guild_id() : void;
    function cross_zone_set_entity_variable_by_client_name() : void;
    function cross_zone_set_entity_variable_by_group_id() : void;
    function cross_zone_set_entity_variable_by_raid_id() : void;
    function cross_zone_set_entity_variable_by_guild_id() : void;
    function cross_zone_signal_client_by_char_id() : void;
    function cross_zone_signal_client_by_group_id() : void;
    function cross_zone_signal_client_by_raid_id() : void;
    function cross_zone_signal_client_by_guild_id() : void;
    function cross_zone_signal_client_by_name() : void;
    function cross_zone_signal_npc_by_npctype_id() : void;
    function cross_zone_update_activity_by_char_id() : void;
    function cross_zone_update_activity_by_char_id() : void;
    function cross_zone_update_activity_by_group_id() : void;
    function cross_zone_update_activity_by_group_id() : void;
    function cross_zone_update_activity_by_raid_id() : void;
    function cross_zone_update_activity_by_raid_id() : void;
    function cross_zone_update_activity_by_guild_id() : void;
    function cross_zone_update_activity_by_guild_id() : void;
    function world_wide_assign_task() : void;
    function world_wide_assign_task() : void;
    function world_wide_assign_task() : void;
    function world_wide_assign_task() : void;
    function world_wide_cast_spell() : void;
    function world_wide_cast_spell() : void;
    function world_wide_cast_spell() : void;
    function world_wide_disable_task() : void;
    function world_wide_disable_task() : void;
    function world_wide_disable_task() : void;
    function world_wide_enable_task() : void;
    function world_wide_enable_task() : void;
    function world_wide_enable_task() : void;
    function world_wide_fail_task() : void;
    function world_wide_fail_task() : void;
    function world_wide_fail_task() : void;
    function world_wide_marquee() : void;
    function world_wide_marquee() : void;
    function world_wide_marquee() : void;
    function world_wide_message() : void;
    function world_wide_message() : void;
    function world_wide_message() : void;
    function world_wide_move() : void;
    function world_wide_move() : void;
    function world_wide_move() : void;
    function world_wide_move_instance() : void;
    function world_wide_move_instance() : void;
    function world_wide_move_instance() : void;
    function world_wide_remove_spell() : void;
    function world_wide_remove_spell() : void;
    function world_wide_remove_spell() : void;
    function world_wide_remove_task() : void;
    function world_wide_remove_task() : void;
    function world_wide_remove_task() : void;
    function world_wide_reset_activity() : void;
    function world_wide_reset_activity() : void;
    function world_wide_reset_activity() : void;
    function world_wide_set_entity_variable_client() : void;
    function world_wide_set_entity_variable_client() : void;
    function world_wide_set_entity_variable_client() : void;
    function world_wide_set_entity_variable_npc() : void;
    function world_wide_signal_client() : void;
    function world_wide_signal_client() : void;
    function world_wide_signal_client() : void;
    function world_wide_signal_npc() : void;
    function world_wide_update_activity() : void;
    function world_wide_update_activity() : void;
    function world_wide_update_activity() : void;
    function world_wide_update_activity() : void;
    function get_qglobals() : void;
    function get_qglobals() : void;
    function get_qglobals() : void;
    function get_qglobals() : void;
    function get_entity_list() : void;
    function zone() : void;
    function zone_group() : void;
    function zone_raid() : void;
    function get_zone_id() : void;
    function get_zone_long_name() : void;
    function get_zone_short_name() : void;
    function get_zone_instance_id() : void;
    function get_zone_instance_version() : void;
    function get_zone_weather() : void;
    function get_zone_time() : void;
    function add_area() : void;
    function remove_area() : void;
    function clear_areas() : void;
    function add_spawn_point() : void;
    function remove_spawn_point() : void;
    function attack() : void;
    function attack_npc() : void;
    function attack_npc_type() : void;
    function follow() : void;
    function follow() : void;
    function stop_follow() : void;
    function get_initiator() : void;
    function get_owner() : void;
    function get_quest_item() : void;
    function get_encounter() : void;
    function map_opcodes() : void;
    function clear_opcode() : void;
    function enable_recipe() : void;
    function disable_recipe() : void;
    function clear_npctype_cache() : void;
    function reloadzonestaticdata() : void;
    function update_zone_header() : void;
    function clock() : void;
    function create_npc() : void;
    function log() : void;
    function debug() : void;
    function debug() : void;
    function log_combat() : void;
    function is_classic_enabled() : void;
    function is_the_ruins_of_kunark_enabled() : void;
    function is_the_scars_of_velious_enabled() : void;
    function is_the_shadows_of_luclin_enabled() : void;
    function is_the_planes_of_power_enabled() : void;
    function is_the_legacy_of_ykesha_enabled() : void;
    function is_lost_dungeons_of_norrath_enabled() : void;
    function is_gates_of_discord_enabled() : void;
    function is_omens_of_war_enabled() : void;
    function is_dragons_of_norrath_enabled() : void;
    function is_depths_of_darkhollow_enabled() : void;
    function is_prophecy_of_ro_enabled() : void;
    function is_the_serpents_spine_enabled() : void;
    function is_the_buried_sea_enabled() : void;
    function is_secrets_of_faydwer_enabled() : void;
    function is_seeds_of_destruction_enabled() : void;
    function is_underfoot_enabled() : void;
    function is_house_of_thule_enabled() : void;
    function is_veil_of_alaris_enabled() : void;
    function is_rain_of_fear_enabled() : void;
    function is_call_of_the_forsaken_enabled() : void;
    function is_the_darkend_sea_enabled() : void;
    function is_the_broken_mirror_enabled() : void;
    function is_empires_of_kunark_enabled() : void;
    function is_ring_of_scale_enabled() : void;
    function is_the_burning_lands_enabled() : void;
    function is_torment_of_velious_enabled() : void;
    function is_current_expansion_classic() : void;
    function is_current_expansion_the_ruins_of_kunark() : void;
    function is_current_expansion_the_scars_of_velious() : void;
    function is_current_expansion_the_shadows_of_luclin() : void;
    function is_current_expansion_the_planes_of_power() : void;
    function is_current_expansion_the_legacy_of_ykesha() : void;
    function is_current_expansion_lost_dungeons_of_norrath() : void;
    function is_current_expansion_gates_of_discord() : void;
    function is_current_expansion_omens_of_war() : void;
    function is_current_expansion_dragons_of_norrath() : void;
    function is_current_expansion_depths_of_darkhollow() : void;
    function is_current_expansion_prophecy_of_ro() : void;
    function is_current_expansion_the_serpents_spine() : void;
    function is_current_expansion_the_buried_sea() : void;
    function is_current_expansion_secrets_of_faydwer() : void;
    function is_current_expansion_seeds_of_destruction() : void;
    function is_current_expansion_underfoot() : void;
    function is_current_expansion_house_of_thule() : void;
    function is_current_expansion_veil_of_alaris() : void;
    function is_current_expansion_rain_of_fear() : void;
    function is_current_expansion_call_of_the_forsaken() : void;
    function is_current_expansion_the_darkend_sea() : void;
    function is_current_expansion_the_broken_mirror() : void;
    function is_current_expansion_empires_of_kunark() : void;
    function is_current_expansion_ring_of_scale() : void;
    function is_current_expansion_the_burning_lands() : void;
    function is_current_expansion_torment_of_velious() : void;
    function is_content_flag_enabled() : void;
    function set_content_flag() : void;*/
}

declare namespace Random 
{
    function Int(low : number, high : number) : number;
    function Real(low : number, high : number) : number;
    function Roll(roll : number) : number;
    function RollReal(roll : number) : number;
    function Roll0(max : number) : number;
}

declare namespace Event 
{
    const say : number;
    const trade : number;
    const death : number;
    const spawn : number;
    const combat : number;
    const slay : number;
    const waypoint_arrive : number;
    const waypoint_depart : number;
    const timer : number;
    const signal : number;
    const hp : number;
    const enter : number;
    const exit : number;
    const enter_zone : number;
    const click_door : number;
    const loot : number;
    const zone : number;
    const level_up : number;
    const killed_merit : number;
    const cast_on : number;
    const task_accepted : number;
    const task_stage_complete : number;
    const environmental_damage : number;
    const task_update : number;
    const task_complete : number;
    const task_fail : number;
    const aggro_say : number;
    const player_pickup : number;
    const popup_response : number;
    const proximity_say : number;
    const cast : number;
    const cast_begin : number;
    const scale_calc : number;
    const item_enter_zone : number;
    const target_change : number;
    const hate_list : number;
    const spell_effect : number;
    const spell_buff_tic : number;
    const spell_fade : number;
    const spell_effect_translocate_complete : number;
    const combine_success  : number;
    const combine_failure  : number;
    const item_click : number;
    const item_click_cast : number;
    const group_change : number;
    const forage_success : number;
    const forage_failure : number;
    const fish_start : number;
    const fish_success : number;
    const fish_failure : number;
    const click_object : number;
    const discover_item : number;
    const disconnect : number;
    const connect : number;
    const item_tick : number;
    const duel_win : number;
    const duel_lose : number;
    const encounter_load : number;
    const encounter_unload : number;
    const command : number;
    const drop_item : number;
    const destroy_item : number;
    const feign_death : number;
    const weapon_proc : number;
    const equip_item : number;
    const unequip_item : number;
    const augment_item : number;
    const unaugment_item : number;
    const augment_insert : number;
    const augment_remove : number;
    const enter_area : number;
    const leave_area : number;
    const death_complete : number;
    const unhandled_opcode : number;
    const tick : number;
    const spawn_zone : number;
    const death_zone : number;
    const use_skill : number;
}

declare namespace Faction
{
    const Ally : number;
    const Warmly : number;
    const Kindly : number;
    const Amiable : number;
    const Indifferent : number;
    const Apprehensive : number;
    const Dubious : number;
    const Threatenly : number;
    const Scowls : number;
}

declare namespace Slot
{
    const Charm : number;
    const Ear1 : number;
    const Head : number;
    const Face : number;
    const Ear2 : number;
    const Neck : number;
    const Shoulders : number;
    const Arms : number;
    const Back : number;
    const Wrist1 : number;
    const Wrist2 : number;
    const Range : number;
    const Hands : number;
    const Primary : number;
    const Secondary : number;
    const Finger1 : number;
    const Finger2 : number;
    const Chest : number;
    const Legs : number;
    const Feet : number;
    const Waist : number;
    const PowerSource : number;
    const Ammo : number;
    const General1 : number;
    const General2 : number;
    const General3 : number;
    const General4 : number;
    const General5 : number;
    const General6 : number;
    const General7 : number;
    const General8 : number;
    const General9 : number;
    const General10 : number;
    const Cursor : number;
    const PossessionsBegin : number;
    const PossessionsEnd : number;
    const EquipmentBegin : number;
    const EquipmentEnd : number;
    const GeneralBegin : number;
    const GeneralEnd : number;
    const PossessionsBagsBegin : number;
    const PossessionsBagsEnd : number;
    const GeneralBagsBegin : number;
    const GeneralBagsEnd : number;
    const General1BagBegin : number;
    const General1BagEnd : number;
    const General2BagBegin : number;
    const General2BagEnd : number;
    const General3BagBegin : number;
    const General3BagEnd : number;
    const General4BagBegin : number;
    const General4BagEnd : number;
    const General5BagBegin : number;
    const General5BagEnd : number;
    const General6BagBegin : number;
    const General6BagEnd : number;
    const General7BagBegin : number;
    const General7BagEnd : number;
    const General8BagBegin : number;
    const General8BagEnd : number;
    const General9BagBegin : number;
    const General9BagEnd : number;
    const General10BagBegin : number;
    const General10BagEnd : number;
    const CursorBagBegin : number;
    const CursorBagEnd : number;
    const Tradeskill : number;
    const Augment : number;
    const BankBegin : number;
    const BankEnd : number;
    const BankBagsBegin : number;
    const BankBagsEnd : number;
    const SharedBankBegin : number;
    const SharedBankEnd : number;
    const SharedBankBagsBegin : number;
    const SharedBankBagsEnd : number;
    const BagSlotBegin : number;
    const BagSlotEnd : number;
    const AugSocketBegin : number;
    const AugSocketEnd : number;
    const Invalid : number;
    const Shoulder : number;
    const Bracer1 : number;
    const Bracer2 : number;
    const Ring1 : number;
    const Ring2 : number;
    const PersonalBegin : number;
    const PersonalEnd : number;
    const CursorEnd : number;
}

declare namespace Material
{
    const Head : number;
    const Chest : number;
    const Arms : number;
    const Wrist : number;
    const Hands : number;
    const Legs : number;
    const Feet : number;
    const Primary : number;
    const Secondary : number;
    const Count : number;
    const Invalid : number;
    const Bracer : number;
    const Max : number;
}

declare namespace ClientVersion
{
    const Unknown : number;
    const Titanium : number;
    const SoF : number;
    const SoD : number;
    const Underfoot : number;
    const UF : number;
    const RoF : number;
    const RoF2 : number;
}

declare namespace Appearance
{
    const Standing : number;
    const Sitting : number;
    const Crouching : number;
    const Dead : number;
    const Looting : number;
}

declare namespace Class
{
    const WARRIOR : number;
    const CLERIC : number;
    const PALADIN : number;
    const RANGER : number;
    const SHADOWKNIGHT : number;
    const DRUID : number;
    const MONK : number;
    const BARD : number;
    const ROGUE : number;
    const SHAMAN : number;
    const NECROMANCER : number;
    const WIZARD : number;
    const MAGICIAN : number;
    const ENCHANTER : number;
    const BEASTLORD : number;
    const BERSERKER : number;
    const WARRIORGM : number;
    const CLERICGM : number;
    const PALADINGM : number;
    const RANGERGM : number;
    const SHADOWKNIGHTGM : number;
    const DRUIDGM : number;
    const MONKGM : number;
    const BARDGM : number;
    const ROGUEGM : number;
    const SHAMANGM : number;
    const NECROMANCERGM : number;
    const WIZARDGM : number;
    const MAGICIANGM : number;
    const ENCHANTERGM : number;
    const BEASTLORDGM : number;
    const BERSERKERGM : number;
    const BANKER : number;
    const MERCHANT : number;
    const DISCORD_MERCHANT : number;
    const ADVENTURERECRUITER : number;
    const ADVENTUREMERCHANT : number;
    const LDON_TREASURE : number;
    const CORPSE_CLASS : number;
    const TRIBUTE_MASTER : number;
    const GUILD_TRIBUTE_MASTER : number;
    const NORRATHS_KEEPERS_MERCHANT : number;
    const DARK_REIGN_MERCHANT : number;
    const FELLOWSHIP_MASTER : number;
    const ALT_CURRENCY_MERCHANT : number;
    const MERCERNARY_MASTER : number;
}

declare namespace Skill
{
    const Blunt1H : number; //was 1HBlunt
    const Slashing1H : number; //was 1HSlashing
    const Blunt2H : number; //was 2HBlunt
    const Slashing2H : number; //was 2HSlashing
    const Abjuration : number;
    const Alteration : number;
    const ApplyPoison : number;
    const Archery : number;
    const Backstab : number;
    const BindWound : number;
    const Bash : number;
    const Block : number;
    const BrassInstruments : number;
    const Channeling : number;
    const Conjuration : number;
    const Defense : number;
    const Disarm : number;
    const DisarmTraps : number;
    const Divination : number;
    const Dodge : number;
    const DoubleAttack : number;
    const DragonPunch : number;
    const TailRake : number;
    const DualWield : number;
    const EagleStrike : number;
    const Evocation : number;
    const FeignDeath : number;
    const FlyingKick : number;
    const Forage : number;
    const HandtoHand : number;
    const Hide : number;
    const Kick : number;
    const Meditate : number;
    const Mend : number;
    const Offense : number;
    const Parry : number;
    const PickLock : number;
    const Piercing1H : number; //was 1HPiercing
    const Riposte : number;
    const RoundKick : number;
    const SafeFall : number;
    const SenseHeading : number;
    const Singing : number;
    const Sneak : number;
    const SpecializeAbjure : number;
    const SpecializeAlteration : number;
    const SpecializeConjuration : number;
    const SpecializeDivination : number;
    const SpecializeEvocation : number;
    const PickPockets : number;
    const StringedInstruments : number;
    const Swimming : number;
    const Throwing : number;
    const TigerClaw : number;
    const Tracking : number;
    const WindInstruments : number;
    const Fishing : number;
    const MakePoison : number;
    const Tinkering : number;
    const Research : number;
    const Alchemy : number;
    const Baking : number;
    const Tailoring : number;
    const SenseTraps : number;
    const Blacksmithing : number;
    const Fletching : number;
    const Brewing : number;
    const AlcoholTolerance : number;
    const Begging : number;
    const JewelryMaking : number;
    const Pottery : number;
    const PercussionInstruments : number;
    const Intimidation : number;
    const Berserking : number;
    const Taunt : number;
    const Frenzy : number;
    const RemoveTraps : number;
    const TripleAttack : number;
    const Piercing2H : number; //was 2HPiercing
    const HIGHEST_SKILL : number;
}

declare namespace BT
{
    const Humanoid : number;
    const Lycanthrope : number;
    const Undead : number;
    const Giant : number;
    const Construct : number;
    const Extraplanar : number;
    const Magical : number;
    const SummonedUndead : number;
    const RaidGiant : number;
    const NoTarget : number;
    const Vampire : number;
    const Atenha_Ra : number;
    const Greater_Akheva : number;
    const Khati_Sha : number;
    const Seru : number;
    const Draz_Nurakk : number;
    const Zek : number;
    const Luggald : number;
    const Animal : number;
    const Insect : number;
    const Monster : number;
    const Summoned : number;
    const Plant : number;
    const Dragon : number;
    const Summoned2 : number;
    const Summoned3 : number;
    const VeliousDragon : number;
    const Dragon3 : number;
    const Boxes : number;
    const Muramite : number;
    const NoTarget2 : number;
    const SwarmPet : number;
    const InvisMan : number;
    const Special : number;
}

declare namespace Filter
{
    const None : number;
    const GuildChat : number;
    const Socials : number;
    const GroupChat : number;
    const Shouts : number;
    const Auctions : number;
    const OOC : number;
    const BadWords : number;
    const PCSpells : number;
    const NPCSpells : number;
    const BardSongs : number;
    const SpellCrits : number;
    const MeleeCrits : number;
    const SpellDamage : number;
    const MyMisses : number;
    const OthersMiss : number;
    const OthersHit : number;
    const MissedMe : number;
    const DamageShields : number;
    const DOT : number;
    const PetHits : number;
    const PetMisses : number;
    const FocusEffects : number;
    const PetSpells : number;
    const HealOverTime : number;
    const Unknown25 : number;
    const Unknown26 : number;
    const Unknown27 : number;
    const Unknown28 : number;
}

declare namespace MT
{
    const NPCQuestSay : number;
    const Say : number;
    const Tell : number;
    const Group : number;
    const Guild : number;
    const OOC : number;
    const Auction : number;
    const Shout : number;
    const Emote : number;
    const Spells : number;
    const YouHitOther : number;
    const OtherHitsYou : number;
    const YouMissOther : number;
    const OtherMissesYou : number;
    const Broadcasts : number;
    const Skills : number;
    const Disciplines : number;
    const Unused1 : number;
    const DefaultText : number;
    const Unused2 : number;
    const MerchantOffer : number;
    const MerchantBuySell : number;
    const YourDeath : number;
    const OtherDeath : number;
    const OtherHits : number;
    const OtherMisses : number;
    const Who : number;
    const YellForHelp : number;
    const NonMelee : number;
    const WornOff : number;
    const MoneySplit : number;
    const LootMessages : number;
    const DiceRoll : number;
    const OtherSpells : number;
    const SpellFailure : number;
    const Chat : number;
    const Channel1 : number;
    const Channel2 : number;
    const Channel3 : number;
    const Channel4 : number;
    const Channel5 : number;
    const Channel6 : number;
    const Channel7 : number;
    const Channel8 : number;
    const Channel9 : number;
    const Channel10 : number;
    const CritMelee : number;
    const SpellCrits : number;
    const TooFarAway : number;
    const NPCRampage : number;
    const NPCFlurry : number;
    const NPCEnrage : number;
    const SayEcho : number;
    const TellEcho : number;
    const GroupEcho : number;
    const GuildEcho : number;
    const OOCEcho : number;
    const AuctionEcho : number;
    const ShoutECho : number;
    const EmoteEcho : number;
    const Chat1Echo : number;
    const Chat2Echo : number;
    const Chat3Echo : number;
    const Chat4Echo : number;
    const Chat5Echo : number;
    const Chat6Echo : number;
    const Chat7Echo : number;
    const Chat8Echo : number;
    const Chat9Echo : number;
    const Chat10Echo : number;
    const DoTDamage : number;
    const ItemLink : number;
    const RaidSay : number;
    const MyPet : number;
    const DS : number;
    const Leadership : number;
    const PetFlurry : number;
    const PetCrit : number;
    const FocusEffect : number;
    const Experience : number;
    const System : number;
    const PetSpell : number;
    const PetResponse : number;
    const ItemSpeech : number;
    const StrikeThrough : number;
    const Stun : number;
}

declare namespace Rule
{
    const MaxLevel : number;
    const PerCharacterQglobalMaxLevel : number;
    const PerCharacterBucketMaxLevel : number;
    const MaxExpLevel : number;
    const DeathExpLossLevel : number;
    const DeathExpLossMaxLevel : number;
    const DeathItemLossLevel : number;
    const DeathExpLossMultiplier : number;
    const UseDeathExpLossMult : number;
    const UseOldRaceRezEffects : number;
    const CorpseDecayTimeMS : number;
    const CorpseResTimeMS : number;
    const LeaveCorpses : number;
    const LeaveNakedCorpses : number;
    const MaxDraggedCorpses : number;
    const DragCorpseDistance : number;
    const FinalExpMultiplier : number;
    const ExpMultiplier : number;
    const AAExpMultiplier : number;
    const GroupExpMultiplier : number;
    const RaidExpMultiplier : number;
    const UseXPConScaling : number;
    const ShowExpValues : number;
    const GreenModifier : number;
    const LightBlueModifier : number;
    const BlueModifier : number;
    const WhiteModifier : number;
    const YellowModifier : number;
    const RedModifier : number;
    const AutosaveIntervalS : number;
    const HPRegenMultiplier : number;
    const ManaRegenMultiplier : number;
    const EnduranceRegenMultiplier : number;
    const OldMinMana : number;
    const ConsumptionMultiplier : number;
    const HealOnLevel : number;
    const FeignKillsPet : number;
    const ItemManaRegenCap : number;
    const ItemHealthRegenCap : number;
    const ItemDamageShieldCap : number;
    const ItemAccuracyCap : number;
    const ItemAvoidanceCap : number;
    const ItemCombatEffectsCap : number;
    const ItemShieldingCap : number;
    const ItemSpellShieldingCap : number;
    const ItemDoTShieldingCap : number;
    const ItemStunResistCap : number;
    const ItemStrikethroughCap : number;
    const ItemATKCap : number;
    const ItemHealAmtCap : number;
    const ItemSpellDmgCap : number;
    const ItemClairvoyanceCap : number;
    const ItemDSMitigationCap : number;
    const ItemEnduranceRegenCap : number;
    const ItemExtraDmgCap : number;
    const HasteCap : number;
    const SkillUpModifier : number;
    const SharedBankPlat : number;
    const BindAnywhere : number;
    const RestRegenEnabled : number;
    const RestRegenTimeToActivate : number;
    const RestRegenRaidTimeToActivate : number;
    const KillsPerGroupLeadershipAA : number;
    const KillsPerRaidLeadershipAA : number;
    const MaxFearDurationForPlayerCharacter : number;
    const MaxCharmDurationForPlayerCharacter : number;
    const BaseHPRegenBonusRaces : number;
    const SoDClientUseSoDHPManaEnd : number;
    const UseRaceClassExpBonuses : number;
    const UseOldRaceExpPenalties : number;
    const UseOldClassExpPenalties : number;
    const RespawnFromHover : number;
    const RespawnFromHoverTimer : number;
    const UseNewStatsWindow : number;
    const ItemCastsUseFocus : number;
    const MinStatusForNoDropExemptions : number;
    const SkillCapMaxLevel : number;
    const StatCap : number;
    const CheckCursorEmptyWhenLooting : number;
    const MaintainIntoxicationAcrossZones : number;
    const EnableDiscoveredItems : number;
    const EnableXTargetting : number;
    const EnableAggroMeter : number;
    const KeepLevelOverMax : number;
    const FoodLossPerUpdate : number;
    const EnableHungerPenalties : number;
    const EnableFoodRequirement : number;
    const BaseInstrumentSoftCap : number;
    const UseSpellFileSongCap : number;
    const BaseRunSpeedCap : number;
    const OrnamentationAugmentType : number;
    const EnvironmentDamageMulipliter : number;
    const UnmemSpellsOnDeath : number;
    const TradeskillUpAlchemy : number;
    const TradeskillUpBaking : number;
    const TradeskillUpBlacksmithing : number;
    const TradeskillUpBrewing : number;
    const TradeskillUpFletching : number;
    const TradeskillUpJewelcrafting : number;
    const TradeskillUpMakePoison : number;
    const TradeskillUpPottery : number;
    const TradeskillUpResearch : number;
    const TradeskillUpTinkering : number;
    const MarqueeHPUpdates : number;
    const IksarCommonTongue : number;
    const OgreCommonTongue : number;
    const TrollCommonTongue : number;
    const ActiveInvSnapshots : number;
    const InvSnapshotMinIntervalM : number;
    const InvSnapshotMinRetryM : number;
    const InvSnapshotHistoryD : number;
    const RestrictSpellScribing : number;
    const UseStackablePickPocketing : number;
    const EnableAvoidanceCap : number;
    const AvoidanceCap : number;
    const AllowMQTarget : number;
    const UseOldBindWound : number;
    const GrantHoTTOnCreate : number;
    const UseOldConSystem : number;
    const OPClientUpdateVisualDebug : number;
    const AllowCrossClassTrainers : number;
    const PetsUseReagents : number;
    const DismountWater : number;
    const UseNoJunkFishing : number;
    const SoftDeletes : number;
    const DefaultGuild : number;
    const ProcessFearedProximity : number;
    const SuspendIntervalMS : number;
    const UpkeepIntervalMS : number;
    const SuspendIntervalS : number;
    const AllowMercs : number;
    const ChargeMercPurchaseCost : number;
    const ChargeMercUpkeepCost : number;
    const AggroRadius : number;
    const AggroRadiusPuller : number;
    const ResurrectRadius : number;
    const ScaleRate : number;
    const MercsUsePathing : number;
    const AllowMercSuspendInCombat : number;
    const MaxMembers : number;
    const PlayerCreationAllowed : number;
    const PlayerCreationLimit : number;
    const PlayerCreationRequiredStatus : number;
    const PlayerCreationRequiredLevel : number;
    const PlayerCreationRequiredTime : number;
    const MaxTrainTradeskills : number;
    const UseLimitTradeskillSearchSkillDiff : number;
    const MaxTradeskillSearchSkillDiff : number;
    const MaxTrainSpecializations : number;
    const SwimmingStartValue : number;
    const TrainSenseHeading : number;
    const SenseHeadingStartValue : number;
    const SelfLanguageLearning : number;
    const RequireTomeHandin : number;
    const AttackCommandRange : number;
    const UnTargetableSwarmPet : number;
    const PetPowerLevelCap : number;
    const CanTakeNoDrop : number;
    const MinStatusToSummonItem : number;
    const MinStatusToZoneAnywhere : number;
    const MinStatusToLevelTarget : number;
    const ZoneAutobootTimeoutMS : number;
    const UseBannedIPsTable : number;
    const EnableTutorialButton : number;
    const EnableReturnHomeButton : number;
    const MaxLevelForTutorial : number;
    const TutorialZoneID : number;
    const GuildBankZoneID : number;
    const MinOfflineTimeToReturnHome : number;
    const MaxClientsPerIP : number;
    const ExemptMaxClientsStatus : number;
    const AddMaxClientsPerIP : number;
    const AddMaxClientsStatus : number;
    const MaxClientsSetByStatus : number;
    const EnableIPExemptions : number;
    const ClearTempMerchantlist : number;
    const DeleteStaleCorpeBackups : number;
    const GMAccountIPList : number;
    const MinGMAntiHackStatus : number;
    const SoFStartZoneID : number;
    const TitaniumStartZoneID : number;
    const ExpansionSettings : number;
    const UseClientBasedExpansionSettings : number;
    const PVPSettings : number;
    const PVPMinLevel : number;
    const IsGMPetitionWindowEnabled : number;
    const FVNoDropFlag : number;
    const IPLimitDisconnectAll : number;
    const MaxClientsSimplifiedLogic : number;
    const TellQueueSize : number;
    const StartZoneSameAsBindOnCreation : number;
    const EnforceCharacterLimitAtLogin : number;
    const ClientLinkdeadMS : number;
    const GraveyardTimeMS : number;
    const EnableShadowrest : number;
    const UsePlayerCorpseBackups : number;
    const MQWarpExemptStatus : number;
    const MQZoneExemptStatus : number;
    const MQGateExemptStatus : number;
    const MQGhostExemptStatus : number;
    const EnableMQWarpDetector : number;
    const EnableMQZoneDetector : number;
    const EnableMQGateDetector : number;
    const EnableMQGhostDetector : number;
    const MQWarpDetectionDistanceFactor : number;
    const AutoShutdownDelay : number;
    const PEQZoneReuseTime : number;
    const PEQZoneDebuff1 : number;
    const PEQZoneDebuff2 : number;
    const UsePEQZoneDebuffs : number;
    const HotZoneBonus : number;
    const EbonCrystalItemID : number;
    const RadiantCrystalItemID : number;
    const LevelBasedEXPMods : number;
    const WeatherTimer : number;
    const EnableLoggedOffReplenishments : number;
    const MinOfflineTimeToReplenishments : number;
    const UseZoneController : number;
    const EnableZoneControllerGlobals : number;
    const GlobalLootMultiplier : number;
    const KillProcessOnDynamicShutdown : number;
    const SecondsBeforeIdle : number;
    const FixPathingZOnSendTo : number;
    const FixZWhenPathing : number;
    const DistanceCanTravelBeforeAdjustment : number;
    const MobZVisualDebug : number;
    const FixPathingZMaxDeltaSendTo : number;
    const FindBestZHeightAdjust : number;
    const Guard : number;
    const Find : number;
    const Fear : number;
    const NavmeshStepSize : number;
    const ShortMovementUpdateRange : number;
    const MaxNavmeshNodes : number;
    const CheckWaypointsInWaterWhenLoading : number;
    const CheckForWaterAtWaypoints : number;
    const CheckForWaterWhenMoving : number;
    const CheckForWaterOnSendTo : number;
    const CheckForWaterWhenFishing : number;
    const FishingRodLength : number;
    const FishingLineLength : number;
    const FishingLineStepSize : number;
    const ResistChance : number;
    const ResistMod : number;
    const PartialHitChance : number;
    const PartialHitChanceFear : number;
    const BaseCritChance : number;
    const BaseCritRatio : number;
    const WizCritLevel : number;
    const WizCritChance : number;
    const WizCritRatio : number;
    const ResistPerLevelDiff : number;
    const TranslocateTimeLimit : number;
    const SacrificeMinLevel : number;
    const SacrificeMaxLevel : number;
    const SacrificeItemID : number;
    const EnableSpellGlobals : number;
    const EnableSpellBuckets : number;
    const MaxBuffSlotsNPC : number;
    const MaxSongSlotsNPC : number;
    const MaxDiscSlotsNPC : number;
    const MaxTotalSlotsNPC : number;
    const MaxTotalSlotsPET : number;
    const EnableBlockedBuffs : number;
    const ReflectType : number;
    const ReflectMessagesClose : number;
    const VirusSpreadDistance : number;
    const LiveLikeFocusEffects : number;
    const BaseImmunityLevel : number;
    const NPCIgnoreBaseImmunity : number;
    const AvgSpellProcsPerMinute : number;
    const ResistFalloff : number;
    const CharismaEffectiveness : number;
    const CharismaEffectivenessCap : number;
    const CharismaCharmDuration : number;
    const CharmBreakCheckChance : number;
    const CharmDisablesSpecialAbilities : number;
    const MaxCastTimeReduction : number;
    const RootBreakFromSpells : number;
    const DeathSaveCharismaMod : number;
    const DivineInterventionHeal : number;
    const AdditiveBonusWornType : number;
    const UseCHAScribeHack : number;
    const BuffLevelRestrictions : number;
    const RootBreakCheckChance : number;
    const FearBreakCheckChance : number;
    const SuccorFailChance : number;
    const FRProjectileItem_Titanium : number;
    const FRProjectileItem_SOF : number;
    const FRProjectileItem_NPC : number;
    const UseLiveSpellProjectileGFX : number;
    const FocusCombatProcs : number;
    const PreNerfBardAEDoT : number;
    const AI_SpellCastFinishedFailRecast : number;
    const AI_EngagedNoSpellMinRecast : number;
    const AI_EngagedNoSpellMaxRecast : number;
    const AI_EngagedBeneficialSelfChance : number;
    const AI_EngagedBeneficialOtherChance : number;
    const AI_EngagedDetrimentalChance : number;
    const AI_PursueNoSpellMinRecast : number;
    const AI_PursueNoSpellMaxRecast : number;
    const AI_PursueDetrimentalChance : number;
    const AI_IdleNoSpellMinRecast : number;
    const AI_IdleNoSpellMaxRecast : number;
    const AI_IdleBeneficialChance : number;
    const AI_HealHPPct : number;
    const SHDProcIDOffByOne : number;
    const Jun182014HundredHandsRevamp : number;
    const SwarmPetTargetLock : number;
    const NPC_UseFocusFromSpells : number;
    const NPC_UseFocusFromItems : number;
    const UseAdditiveFocusFromWornSlot : number;
    const AlwaysSendTargetsBuffs : number;
    const FlatItemExtraSpellAmt : number;
    const IgnoreSpellDmgLvlRestriction : number;
    const AllowItemTGB : number;
    const NPCInnateProcOverride : number;
    const OldRainTargets : number;
    const NPCSpellPush : number;
    const AERampageSafeZone : number;
    const PetBaseCritChance : number;
    const NPCBashKickLevel : number;
    const NPCBashKickStunChance : number;
    const MeleeCritDifficulty : number;
    const ArcheryCritDifficulty : number;
    const ThrowingCritDifficulty : number;
    const NPCCanCrit : number;
    const UseIntervalAC : number;
    const PetAttackMagicLevel : number;
    const EnableFearPathing : number;
    const FleeMultiplier : number;
    const FleeGray : number;
    const FleeGrayHPRatio : number;
    const FleeGrayMaxLevel : number;
    const FleeHPRatio : number;
    const FleeIfNotAlone : number;
    const AdjustProcPerMinute : number;
    const AvgProcsPerMinute : number;
    const ProcPerMinDexContrib : number;
    const BaseProcChance : number;
    const ProcDexDivideBy : number;
    const AdjustSpecialProcPerMinute : number;
    const AvgSpecialProcsPerMinute : number;
    const BaseHitChance : number;
    const NPCBonusHitChance : number;
    const HitFalloffMinor : number;
    const HitFalloffModerate : number;
    const HitFalloffMajor : number;
    const HitBonusPerLevel : number;
    const WeaponSkillFalloff : number;
    const ArcheryHitPenalty : number;
    const AgiHitFactor : number;
    const MinChancetoHit : number;
    const MaxChancetoHit : number;
    const MinRangedAttackDist : number;
    const ArcheryBonusRequiresStationary : number;
    const ArcheryBaseDamageBonus : number;
    const ArcheryNPCMultiplier : number;
    const AssistNoTargetSelf : number;
    const MaxRampageTargets : number;
    const DefaultRampageTargets : number;
    const RampageHitsTarget : number;
    const MaxFlurryHits : number;
    const MonkDamageTableBonus : number;
    const FlyingKickBonus : number;
    const DragonPunchBonus : number;
    const EagleStrikeBonus : number;
    const TigerClawBonus : number;
    const RoundKickBonus : number;
    const FrenzyBonus : number;
    const BackstabBonus : number;
    const ProcTargetOnly : number;
    const NPCACFactor : number;
    const ClothACSoftcap : number;
    const LeatherACSoftcap : number;
    const MonkACSoftcap : number;
    const ChainACSoftcap : number;
    const PlateACSoftcap : number;
    const AAMitigationACFactor : number;
    const WarriorACSoftcapReturn : number;
    const KnightACSoftcapReturn : number;
    const LowPlateChainACSoftcapReturn : number;
    const LowChainLeatherACSoftcapReturn : number;
    const CasterACSoftcapReturn : number;
    const MiscACSoftcapReturn : number;
    const OldACSoftcap : number;
    const UseOldDamageInterval : number;
    const WarACSoftcapReturn : number;
    const ClrRngMnkBrdACSoftcapReturn : number;
    const PalShdACSoftcapReturn : number;
    const DruNecWizEncMagACSoftcapReturn : number;
    const RogShmBstBerACSoftcapReturn : number;
    const SoftcapFactor : number;
    const ACthac0Factor : number;
    const ACthac20Factor : number;
    const HitCapPre20 : number;
    const HitCapPre10 : number;
    const MinHastedDelay : number;
    const AvgDefProcsPerMinute : number;
    const DefProcPerMinAgiContrib : number;
    const SpecialAttackACBonus : number;
    const NPCFlurryChance : number;
    const TauntOverLevel : number;
    const TauntSkillFalloff : number;
    const EXPFromDmgShield : number;
    const MonkACBonusWeight : number;
    const ClientStunLevel : number;
    const QuiverHasteCap : number;
    const UseArcheryBonusRoll : number;
    const ArcheryBonusChance : number;
    const BerserkerFrenzyStart : number;
    const BerserkerFrenzyEnd : number;
    const OneProcPerWeapon : number;
    const ProjectileDmgOnImpact : number;
    const MeleePush : number;
    const MeleePushChance : number;
    const UseLiveCombatRounds : number;
    const NPCAssistCap : number;
    const NPCAssistCapTimer : number;
    const UseRevampHandToHand : number;
    const ClassicMasterWu : number;
    const HitBoxMod : number;
    const LevelToStopDamageCaps : number;
    const LevelToStopACTwinkControl : number;
    const ClassicNPCBackstab : number;
    const UseNPCDamageClassLevelMods : number;
    const UseExtendedPoisonProcs : number;
    const MinorNPCCorpseDecayTimeMS : number;
    const MajorNPCCorpseDecayTimeMS : number;
    const CorpseUnlockTimer : number;
    const EmptyNPCCorpseDecayTimeMS : number;
    const UseItemBonusesForNonPets : number;
    const UseBaneDamage : number;
    const SayPauseTimeInSec : number;
    const OOCRegen : number;
    const BuffFriends : number;
    const EnableNPCQuestJournal : number;
    const LastFightingDelayMovingMin : number;
    const LastFightingDelayMovingMax : number;
    const SmartLastFightingDelayMoving : number;
    const ReturnNonQuestNoDropItems : number;
    const StartEnrageValue : number;
    const LiveLikeEnrage : number;
    const EnableMeritBasedFaction : number;
    const NPCToNPCAggroTimerMin : number;
    const NPCToNPCAggroTimerMax : number;
    const UseClassAsLastName : number;
    const NewLevelScaling : number;
    const NPCGatePercent : number;
    const NPCGateNearBind : number;
    const NPCGateDistanceBind : number;
    const NPCHealOnGate : number;
    const UseMeditateBasedManaRegen : number;
    const NPCHealOnGateAmount : number;
    const SmartAggroList : number;
    const SittingAggroMod : number;
    const MeleeRangeAggroMod : number;
    const CurrentTargetAggroMod : number;
    const CriticallyWoundedAggroMod : number;
    const SpellAggroMod : number;
    const SongAggroMod : number;
    const PetSpellAggroMod : number;
    const TunnelVisionAggroMod : number;
    const MaxScalingProcAggro : number;
    const IntAggroThreshold : number;
    const AllowTickPulling : number;
    const MinAggroLevel : number;
    const UseLevelAggro : number;
    const ClientAggroCheckInterval : number;
    const PetAttackRange : number;
    const NPCAggroMaxDistanceEnabled : number;
    const EnableTaskSystem : number;
    const PeriodicCheckTimer : number;
    const RecordCompletedTasks : number;
    const RecordCompletedOptionalActivities : number;
    const KeepOneRecordPerCompletedTask : number;
    const EnableTaskProximity : number;
    const Say : number;
    const Emote : number;
    const BeginCast : number;
    const Anims : number;
    const SpellParticles : number;
    const DamageMessages : number;
    const SpellMessages : number;
    const SongMessages : number;
    const MobPositionUpdates : number;
    const ClientPositionUpdates : number;
    const CriticalDamage : number;
    const MobCloseScanDistance : number;
    const BotExpansionSettings : number;
    const AllowCamelCaseNames : number;
    const CommandSpellRank : number;
    const CreationLimit : number;
    const FinishBuffing : number;
    const GroupBuffing : number;
    const HealRotationMaxMembers : number;
    const HealRotationMaxTargets : number;
    const ManaRegen : number;
    const PreferNoManaCommandSpells : number;
    const QuestableSpawnLimit : number;
    const QuestableSpells : number;
    const SpawnLimit : number;
    const UpdatePositionWithTimer : number;
    const UsePathing : number;
    const BotGroupXP : number;
    const BotBardUseOutOfCombatSongs : number;
    const BotLevelsWithOwner : number;
    const BotCharacterLevelEnabled : number;
    const BotCharacterLevel : number;
    const CasterStopMeleeLevel : number;
    const AllowedClasses : number;
    const AllowedRaces : number;
    const AllowedGenders : number;
    const AllowOwnerOptionAltCombat : number;
    const AllowOwnerOptionAutoDefend : number;
    const LeashDistance : number;
    const AllowApplyPoisonCommand : number;
    const AllowApplyPotionCommand : number;
    const RestrictApplyPotionToRogue : number;
    const ServerWideOOC : number;
    const ServerWideAuction : number;
    const EnableVoiceMacros : number;
    const EnableMailKeyIPVerification : number;
    const EnableAntiSpam : number;
    const SuppressCommandErrors : number;
    const MinStatusToBypassAntiSpam : number;
    const MinimumMessagesPerInterval : number;
    const MaximumMessagesPerInterval : number;
    const MaxMessagesBeforeKick : number;
    const IntervalDurationMS : number;
    const KarmaUpdateIntervalMS : number;
    const KarmaGlobalChatLimit : number;
    const GlobalChatLevelLimit : number;
    const UsePriceMod : number;
    const SellCostMod : number;
    const BuyCostMod : number;
    const PriceBonusPct : number;
    const PricePenaltyPct : number;
    const ChaBonusMod : number;
    const ChaPenaltyMod : number;
    const EnableAltCurrencySell : number;
    const AllowCorpse : number;
    const AuditTrail : number;
    const MaxSearchResults : number;
    const EnableWarpToTrader : number;
    const MaxBarterSearchResults : number;
    const EnableMailSystem : number;
    const ExpireTrash : number;
    const ExpireRead : number;
    const ExpireUnread : number;
    const RequiredStatusAdmin : number;
    const RequiredStatusListAll : number;
    const DeleteTimer : number;
    const RecordSellToMerchant : number;
    const RecordBuyFromMerchant : number;
    const MinNumberForGroup : number;
    const MaxNumberForGroup : number;
    const MaxLevelRange : number;
    const NumberKillsForBossSpawn : number;
    const DistanceForRescueAccept : number;
    const DistanceForRescueComplete : number;
    const ItemIDToEnablePorts : number;
    const LDoNTrapDistanceUse : number;
    const LDoNBaseTrapDifficulty : number;
    const LDoNCriticalFailTrapThreshold : number;
    const LDoNAdventureExpireTime : number;
    const ExpPerPoint : number;
    const Stacking : number;
    const NormalizedAAEnabled : number;
    const NormalizedAANumberOfWhiteConPerAA : number;
    const ModernAAScalingEnabled : number;
    const ModernAAScalingStartPercent : number;
    const ModernAAScalingAAMinimum : number;
    const ModernAAScalingAALimit : number;
    const SoundForAAEarned : number;
    const SessionTimeOut : number;
    const ResendDelayBaseMS : number;
    const ResendDelayFactor : number;
    const ResendDelayMinMS : number;
    const ResendDelayMaxMS : number;
    const ClientDataRate : number;
    const CompressZoneStream : number;
    const PlayerLogChat : number;
    const PlayerLogTrades : number;
    const PlayerDropItems : number;
    const PlayerLogHandins : number;
    const PlayerLogNPCKills : number;
    const PlayerLogDeletes : number;
    const PlayerLogMoves : number;
    const PlayerLogMerchantTransactions : number;
    const PlayerLogPCCoordinates : number;
    const PlayerLogDropItem : number;
    const PlayerLogZone : number;
    const PlayerLogDeaths : number;
    const PlayerLogConnectDisconnect : number;
    const PlayerLogLevels : number;
    const PlayerLogAARate : number;
    const PlayerLogQGlobalUpdate : number;
    const PlayerLogTaskUpdates : number;
    const PlayerLogKeyringAddition : number;
    const PlayerLogAAPurchases : number;
    const PlayerLogTradeSkillEvents : number;
    const PlayerLogIssuedCommandes : number;
    const PlayerLogMoneyTransactions : number;
    const PlayerLogAlternateCurrencyTransactions : number;
    const EnforceAugmentRestriction : number;
    const EnforceAugmentUsability : number;
    const EnforceAugmentWear : number;
    const DeleteTransformationMold : number;
    const AllowAnyWeaponTransformation : number;
    const TransformSummonedBags : number;
    const UseLiveFactionMessage : number;
    const UseLiveBlockedMessage : number;
    const ReportingSystemActive : number;
    const UseOldReportingMethod : number;
    const DumpTargetEntity : number;
    const AllyFactionMinimum : number;
    const WarmlyFactionMinimum : number;
    const KindlyFactionMinimum : number;
    const AmiablyFactionMinimum : number;
    const IndifferentlyFactionMinimum : number;
    const ApprehensivelyFactionMinimum : number;
    const DubiouslyFactionMinimum : number;
    const ThreateninglyFactionMinimum : number;
    const PrintFileFunctionAndLine : number;
    const QuestsRepopWithReload : number;
    const QuestsRepopWhenPlayersNotInCombat : number;
    const QuestsResetTimersWithReload : number;
    const QuestsAutoReloadGlobalScripts : number;
    const CurrentExpansion : number;
    const ReservedInstances : number;
    const RecycleInstanceIds : number;
    const GuildHallExpirationDays : number;
    const _IntRuleCount : number;
    const _RealRuleCount : number;
    const _BoolRuleCount : number;
}

declare namespace RuleI
{
    function Get(rule : number) : number;
}

declare namespace RuleR
{
    function Get(rule : number) : number;
}

declare namespace RuleB
{
    function Get(rule : number) : number;
}

declare namespace SpeakMode
{
    const Raw : number;
    const Say : number;
    const Shout : number;
    const EmoteAlt : number;
    const Emote : number;
    const Group : number;
}

declare namespace JournalMode
{
    const None : number;
    const Log1 : number;
    const Log2 : number;
}
