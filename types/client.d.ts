declare interface QuestReward
{
    copper : number;
    silver : number;
    gold : number;
    platinum : number;
    itemid : number;
    items : Array<number>;
    exp : number;
    faction : number;
}

declare class Client extends Mob
{
    constructor();
    null : boolean;
    valid : boolean;
    SendSound() : void;
    Save(commit_now? : number) : void;
    SaveBackup() : void;
    Connected() : boolean;
    InZone() : boolean;
    Kick() : void;
    Disconnect() : void;
    IsLD() : boolean;
    WorldKick() : void;
    SendToGuildHall() : void;
    GetAnon() : boolean;
    Duck() : void;
    DyeArmorBySlot(slot : number, red : number, green : number, blue : number, use_tint? : number) : void;
    Stand() : void;
    SetGM(v : boolean) : void;
    SetPVP(v : boolean) : void;
    GetPVP() : boolean;
    GetGM() : boolean;
    SetBaseClass(v : number) : void;
    SetBaseRace(v : number) : void;
    SetBaseGender(v : number) : void;
    GetBaseFace() : number;
    GetLanguageSkill(skill_id : number) : number;
    GetLastName() : string;
    GetLDoNPointsTheme(theme : number) : number;
    GetBaseSTR() : number;
    GetBaseSTA() : number;
    GetBaseCHA() : number;
    GetBaseDEX() : number;
    GetBaseINT() : number;
    GetBaseAGI() : number;
    GetBaseWIS() : number;
    GetWeight() : number;
    GetEXP() : number;
    GetAAExp() : number;
    GetAAPercent() : number;
    GetTotalSecondsPlayed() : number;
    UpdateLDoNPoints(points : number, theme : number) : void;
    SetDeity(v : number) : void;
    AddEXP(add_exp : number, conlevel? : number, resexp? : boolean) : void;
    SetEXP(set_exp : number, set_aaxp : number, resexp? : boolean) : void;
    SetBindPoint(to_zone? : number, to_instance? : number, new_x? : number, new_y? : number, new_z? : number) : void;
    GetBindX() : number;
    GetBindX(index : number) : number;
    GetBindY() : number;
    GetBindY(index : number) : number;
    GetBindZ() : number;
    GetBindZ(index : number) : number;
    GetBindHeading() : number;
    GetBindHeading(index : number) : number;
    GetBindZoneID() : number;
    GetBindZoneID(index : number) : number;
    MovePC(zone : number, x : number, y : number, z : number, heading : number) : void;
    MovePCInstance(zone : number, instance : number, x : number, y : number, z : number, heading : number) : void;
    MoveZone(zone_short_name : string) : void;
    MoveZoneGroup(zone_short_name : string) : void;
    MoveZoneRaid(zone_short_name : string) : void;
    MoveZoneInstance(instance_id : number) : void;
    MoveZoneInstanceGroup(instance_id : number) : void;
    MoveZoneInstanceRaid(instance_id : number) : void;
    ChangeLastName(val : string) : void;
    GetFactionLevel(char_id : number, npc_id : number, race : number, class_ : number, deity : number, faction : number, npc : NPC) : number;
    SetFactionLevel(char_id : number, npc_id : number, char_class : number, char_race : number, char_deity : number) : void;
    SetFactionLevel2(char_id : number, faction_id : number, char_class : number, char_race : number, char_deity : number, value : number, temp : number) : void;
    GetRawItemAC() : number;
    AccountID() : number;
    AccountName() : string;
    Admin() : number;
    CharacterID() : number;
    GuildRank() : number;
    GuildID() : number;
    GetFace() : number;
    TakeMoneyFromPP(copper : number, update_client? : boolean) : boolean;
    AddMoneyToPP(copper : number, silver : number, gold : number, platinum : number, update_client : boolean) : void;
    TGB() : boolean;
    GetSkillPoints() : number;
    SetSkillPoints(skill : number) : void;
    IncreaseSkill(skill_id : number, value? : number) : void;
    IncreaseLanguageSkill(skill_id : number, value? : number) : void;
    GetRawSkill(skill_id : number) : number;
    HasSkill(skill_id : number) : boolean;
    CanHaveSkill(skill_id : number) : boolean;
    SetSkill(skill_id : number, value : number) : void;
    AddSkill(skill_id : number, value : number) : void;
    CheckSpecializeIncrease(spell_id : number) : void;
    CheckIncreaseSkill(skill_id : number, target : Mob, chance_mod? : number) : void;
    SetLanguageSkill(language : number, value : number) : void;
    MaxSkill(skill_id : number) : number;
    IsMedding() : boolean;
    GetDuelTarget() : number;
    IsDueling() : boolean;
    SetDuelTarget(c : number) : void;
    SetDueling(v : boolean) : void;
    ResetAA() : void;
    MemSpell(spell_id : number, slot : number, update_client? : boolean) : void;
    UnmemSpell(slot : number, update_client? : boolean) : void;
    UnmemSpellBySpellID(spell_id : number) : void;
    UnmemSpellAll() : void;
    UnmemSpellAll(update_client : boolean) : void;
    FindMemmedSpellBySlot(slot : number) : number;
    MemmedCount() : number;
    ScribeSpell(spell_id : number, slot : number, update_client? : boolean) : void;
    UnscribeSpell(slot : number, update_client? : boolean) : void;
    UnscribeSpellAll(update_client? : boolean) : void;
    TrainDisc(itemid : number) : void;
    TrainDiscBySpellID(spell_id : number) : void;
    GetDiscSlotBySpellID(spell_id : number) : number;
    UntrainDisc(slot : number, update_client? : boolean) : void;
    UntrainDiscAll(update_client? : boolean) : void;
    IsStanding() : boolean;
    IsSitting() : boolean;
    IsCrouching() : boolean;
    SetFeigned(v : boolean) : void;
    GetFeigned() : boolean;
    AutoSplitEnabled() : boolean;
    SetHorseId(id : number) : void;
    GetHorseId() : number;
    NukeItem(item_num : number, where_to_check? : number) : void;
    SetTint(slot_id : number, color : number) : void;
    SetMaterial(slot_id : number, item_id : number) : void;
    Undye() : void;
    GetItemIDAt(slot_id : number) : number;
    GetAugmentIDAt(slot_id : number, aug_slot : number) : number;
    DeleteItemInInventory(slot_id : number, quantity : number, update_client? : boolean) : void;
    SummonItem(item_id : number, charges? : number, aug1? : number, aug2? : number, aug3? : number, aug4? : number, aug5? : number, attuned? : boolean, to_slot? : number) : void;
    SetStats(type : number, value : number) : void;
    IncStats(type : number, value : number) : void;
    DropItem(slot_id : number) : void;
    BreakInvis() : void;
    LeaveGroup() : void;
    IsGrouped() : boolean;
    IsRaidGrouped() : boolean;
    Hungry() : boolean;
    Thirsty() : boolean;
    GetInstrumentMod(spell_id : number) : number;
    DecreaseByID(type : number, amt : number) : boolean;
    Escape() : void;
    GoFish() : void;
    ForageItem(guarantee? : boolean) : void;
    CalcPriceMod(other : Mob, reverse : boolean) : number;
    ResetTrade() : void;
    GetDisciplineTimer(timer_id : number) : number;
    ResetDisciplineTimer(timer_id : number) : void;
    UseDiscipline(spell_id : number, target_id : number) : boolean;
    GetCharacterFactionLevel(faction_id : number) : number;
    SetZoneFlag(zone_id : number) : void;
    ClearZoneFlag(zone_id : number) : void;
    HasZoneFlag(zone_id : number) : boolean;
    SendZoneFlagInfo(to : Client) : void;
    SetAATitle(title : string) : void;
    GetClientVersion() : number;
    GetClientVersionBit() : number;
    SetTitleSuffix(text : string) : void;
    SetAAPoints(points : number) : void;
    GetAAPoints() : number;
    GetSpentAA() : number;
    AddAAPoints(points : number) : void;
    RefundAA() : void;
    GetModCharacterFactionLevel(faction : number) : number;
    GetLDoNWins() : number;
    GetLDoNLosses() : number;
    GetLDoNWinsTheme(theme : number) : number;
    GetLDoNLossesTheme(theme : number) : number;
    GetStartZone() : number;
    SetStartZone(zone_id : number, x? : number, y? : number, z? : number) : void;
    KeyRingAdd(item : number) : void;
    KeyRingCheck(item : number) : boolean;
    AddPVPPoints(points : number) : void;
    AddCrystals(radiant : number, ebon : number) : void;
    GetPVPPoints() : number;
    GetRadiantCrystals() : number;
    GetEbonCrystals() : number;
    QuestReadBook(text : string, type : number) : void;
    UpdateGroupAAs(points : number, type : number) : void;
    GetGroupPoints() : number;
    GetRaidPoints() : number;
    LearnRecipe(recipe : number) : void;
    GetEndurance() : number;
    GetMaxEndurance() : number;
    GetEndurancePercent() : number;
    SetEndurance(endur : number) : void;
    SendOPTranslocateConfirm(caster : Mob, spell_id : number) : void;
    GetIP() : number;
    AddLevelBasedExp(exp_pct : number, max_level? : number, ignore_mods? : boolean) : void;
    IncrementAA(aa : number) : void;
    GrantAlternateAdvancementAbility(aa_id : number, points : number, ignore_cost? : boolean) : boolean;
    MarkSingleCompassLoc(in_x : number, in_y : number, in_z : number, count? : number) : void;
    ClearCompassMark() : void;
    GetNextAvailableSpellBookSlot(start? : number) : number;
    FindSpellBookSlotBySpellID(spell_id : number) : number;
    UpdateTaskActivity(task : number, activity : number, count : number) : void;
    AssignTask(task : number, npc_id : number, enforce_level_requirement? : boolean) : void;
    FailTask(task : number) : void;
    IsTaskCompleted(task : number) : boolean;
    IsTaskActive(task : number) : boolean;
    IsTaskActivityActive(task : number, activity : number) : boolean;
    GetCorpseCount() : number;
    GetCorpseID(corpse : number) : number;
    GetCorpseItemAt(corpse : number, slot : number) : number;
    AssignToInstance(instance_id : number) : void;
    Freeze() : void;
    UnFreeze() : void;
    GetAggroCount() : number;
    GetCarriedMoney() : number;
    GetAllMoney() : number;
    GetMoney(type : number, subtype : number) : number;
    OpenLFGuildWindow() : void;
    NotifyNewTitlesAvailable() : void;
    Signal(id : number) : void;
    AddAlternateCurrencyValue(currency : number, amount : number) : void;
    SetAlternateCurrencyValue(currency : number, amount : number) : void;
    GetAlternateCurrencyValue(currency : number) : number;
    SendWebLink(site : string) : void;
    HasSpellScribed(spell_id : number) : boolean;
    SetAccountFlag(flag : string, val : string) : void;
    GetAccountFlag(flag : string) : string;
    GetAccountAge() : number;
    GetGroup() : Group;
    GetRaid() : Raid;
    PutItemInInventory(slot_id : number, inst : ItemInst) : boolean;
    PushItemOnCursor(inst : ItemInst) : boolean;
    GetInventory() : Inventory;
    SendItemScale(inst : ItemInst) : void;
    QueuePacket(app : Packet, ack_req? : boolean, client_connection_status? : number, filter? : number) : void;
    GetHunger() : number;
    GetThirst() : number;
    SetHunger(in_hunger : number) : void;
    SetThirst(in_thirst : number) : void;
    SetConsumption(in_hunger : number, in_thirst : number) : void;
    SendMarqueeMessage(type : number, priority : number, fade_val : number, fade_out : number, duration : number, msg : string) : void;
    SendColoredText(type : number, msg : string) : void;
    PlayMP3(file : string) : void;
    QuestReward(target : Mob, copper? : number, silver? : number, gold? : number, platinum? : number, itemid? : number, exp? : number, faction? : boolean) : void;
    QuestReward(target : Mob, reward : QuestReward) : void;
    IsDead() : boolean;
    CalcCurrentWeight() : number;
    CalcATK() : number;
    FilteredMessage(sender : Mob, type : number, filter : number, message : string) : void;
    EnableAreaHPRegen(value : number) : void;
    DisableAreaHPRegen() : void;
    EnableAreaManaRegen(value : number) : void;
    DisableAreaManaRegen() : void;
    EnableAreaEndRegen(value : number) : void;
    DisableAreaEndRegen() : void;
    EnableAreaRegens(value : number) : void;
    DisableAreaRegens() : void;
    SetPrimaryWeaponOrnamentation(model_id : number) : void;
    SetSecondaryWeaponOrnamentation(model_id : number) : void;
    SetClientMaxLevel(value : number) : void;
    GetClientMaxLevel() : number;
}
